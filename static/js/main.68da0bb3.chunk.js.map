{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/Contact.js","components/About.js","hoc/Rainbow.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","withRouter","props","className","to","Home","state","post","axios","get","then","res","console","log","setState","data","slice","this","postList","length","map","key","id","src","Pokeball","alt","title","body","Component","Contact","Rainbow","WrappedComponent","Math","floor","random","Post","match","params","post_id","App","exact","path","component","About","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,sC,0LCoB5BC,eAjBA,SAACC,GAGZ,OACI,yBAAKC,UAAU,4BACX,yBAAKA,UAAU,aACX,uBAAIA,UAAU,cAAd,cACI,wBAAIA,UAAU,SACV,gCAAK,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACL,gCAAK,kBAAC,IAAD,CAASA,GAAG,UAAZ,UACL,gCAAK,kBAAC,IAAD,CAASA,GAAG,YAAZ,kB,kCCoCdC,E,4MA5CXC,MAAQ,CACJC,KAAM,I,kEAEU,IAAD,OACfC,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVP,KAAMI,EAAII,KAAKC,MAAM,EAAE,W,+BAI1B,IACET,EAAQU,KAAKX,MAAbC,KACDW,EAAWX,EAAKY,OAClBZ,EAAKa,KAAI,SAAAb,GACL,OACI,yBAAKJ,UAAU,YAAYkB,IAAKd,EAAKe,IACjC,yBAAKC,IAAKC,IAAUC,IAAI,KACxB,yBAAKtB,UAAU,gBACf,kBAAC,IAAD,CAAMC,GAAI,IAAMG,EAAKe,IACjB,0BAAMnB,UAAU,cACjBI,EAAKmB,QAIJ,2BAAInB,EAAKoB,WAM7B,yBAAKxB,UAAU,UAAf,gBAGJ,OACI,yBAAKA,UAAU,kBACX,wBAAIA,UAAU,UAAd,yBACCe,O,GAvCMU,aCQJC,EAVC,SAAC3B,GAEb,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,UAAd,4BACA,iMCIG2B,ECTC,SAACC,GAEb,IAEM5B,EAFQ,CAAC,MAAO,OAAQ,SAAS,OAAO,QAAQ,UAC5B6B,KAAKC,MAAsB,EAAhBD,KAAKE,WACV,QAE5B,OAAM,SAAChC,GACH,OACI,yBAAKC,UAAWA,GACZ,kBAAC4B,EAAqB7B,KDA3B4B,EATD,WACV,OACI,yBAAK3B,UAAU,aACX,wBAAIA,UAAU,UAAd,0BACA,mME+BGgC,E,4MAlCX7B,MAAQ,CACJC,KAAM,M,kEAEU,IAAD,OACXe,EAAKL,KAAKf,MAAMkC,MAAMC,OAAOC,QACjC9B,IAAMC,IAAI,6CAA+Ca,GACxDZ,MAAK,SAAAC,GACF,EAAKG,SAAS,CACVP,KAAMI,EAAII,OAEdH,QAAQC,IAAIF,Q,+BAKhB,IAAMJ,EAAOU,KAAKX,MAAMC,KACpB,yBAAKJ,UAAU,QACX,wBAAIA,UAAU,UAAUc,KAAKX,MAAMC,KAAKmB,OACxC,2BAAIT,KAAKX,MAAMC,KAAKoB,OAGzB,yBAAKxB,UAAU,UAAf,mBAKH,OACI,yBAAKA,UAAU,aACVI,O,GA7BEqB,aCwBJW,E,uKAhBX,OACE,kBAAC,IAAD,KACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IACjC,kBAAC,IAAD,CAAOoC,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWb,IAClC,kBAAC,IAAD,CAAOY,KAAK,kBAAkBC,UAAWP,W,GAVnCP,aCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACvB,2DCZNY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.68da0bb3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from 'react'\r\nimport {Link, NavLink, withRouter} from 'react-router-dom'\r\n\r\nconst Navbar = (props) => {\r\n  \r\n \r\n    return(\r\n        <nav className=\"nav-wrapper red darken-3\">\r\n            <div className=\"container\">\r\n                <a  className=\"brand-logo\">Poke'Times</a>\r\n                    <ul className=\"right\">\r\n                        <li> <Link to=\"/\">Home</Link></li>\r\n                        <li> <NavLink to=\"/about\">About</NavLink></li>\r\n                        <li> <NavLink to=\"/contact\">Contact</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>   \r\n     )\r\n}\r\n\r\nexport default withRouter(Navbar)","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\nimport {Link} from 'react-router-dom'\r\nimport Pokeball from '../pokeball.png'\r\nclass Home extends Component {\r\n    state = {\r\n        post: []\r\n    }\r\n    componentDidMount(){\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => {\r\n            console.log(res)\r\n            this.setState({\r\n                post: res.data.slice(0,10)\r\n            })\r\n        })\r\n    }\r\n    render(){\r\n        const {post} = this.state\r\n        const postList = post.length ? (\r\n            post.map(post => {\r\n                return(\r\n                    <div className=\"post card\" key={post.id}>\r\n                        <img src={Pokeball} alt=\"\"/>\r\n                        <div className=\"card-content\">\r\n                        <Link to={'/' + post.id}>\r\n                            <span className='card-title'> \r\n                          {post.title}\r\n                            </span>\r\n                        </Link>\r\n                          \r\n                            <p>{post.body}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        ) : ( \r\n        <div className='center'>No posts yet</div>\r\n        )\r\n       \r\n    return(\r\n        <div className=\"container home\">\r\n            <h4 className=\"center\">This is the home page</h4>\r\n            {postList}\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default Home","import React from 'react'\r\n\r\nconst Contact = (props) => {\r\n    \r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">This is the contact page</h4>\r\n            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Exercitationem sequi cumque, ex sint culpa eveniet consequatur asperiores? Similique, deleniti? Minima.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React from 'react'\r\nimport Rainbow from '../hoc/Rainbow'\r\nconst About = () => {\r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">This is the about page</h4>\r\n            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Exercitationem sequi cumque, ex sint culpa eveniet consequatur asperiores? Similique, deleniti? Minima.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rainbow(About)\r\n","import React from 'react'\r\n\r\nconst Rainbow = (WrappedComponent) => {\r\n\r\n    const colors =['red', 'pink', 'orange','blue','green','yellow' ];\r\n    const randomColor= colors[Math.floor(Math.random() * 5)];\r\n    const className = randomColor + '-text';\r\n\r\n        return(props) => {\r\n            return(\r\n                <div className={className}>\r\n                    <WrappedComponent {...props}/>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\nexport default Rainbow","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\nclass Post extends Component{\r\n    state = {\r\n        post: null\r\n    }\r\n    componentDidMount(){\r\n        let id = this.props.match.params.post_id;\r\n        axios.get('https://jsonplaceholder.typicode.com/posts' + id   )\r\n        .then(res => {\r\n            this.setState({\r\n                post: res.data\r\n            })\r\n            console.log(res)\r\n        })\r\n    }\r\n    render(){\r\n\r\n        const post = this.state.post ? (\r\n            <div className=\"post\">\r\n                <h4 className=\"center\">{this.state.post.title}</h4>\r\n                <p>{this.state.post.body}</p>\r\n            </div>\r\n        ) : (\r\n           <div className=\"center\">\r\n            Loading post...\r\n           </div>\r\n        )\r\n        \r\n        return(\r\n            <div className=\"container\">\r\n                {post}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post","import React, { Component } from 'react';\nimport Navbar from './components/Navbar'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Home from './components/Home'\nimport Contact from './components/Contact'\nimport About from './components/About'\nimport Post from './components/Post'\n\nclass App extends Component {\n  render(){\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar/>\n          <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/about\" component={About}/>\n            <Route path=\"/contact\" component={Contact}/>\n            <Route path=\"/posts/:post.id\" component={Post}/>\n          </Switch>\n        </div>  \n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}